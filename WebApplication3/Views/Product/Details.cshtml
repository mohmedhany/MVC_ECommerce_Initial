@model WebApplication3.Models.Product

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div class="py-3 py-md-5 bg-light">
    <div class="container">
        <div class="row">
            <div class="col-md-5 mt-3">
                <div class="bg-white border">
                    <img src="~/images/electronics-banner-2.jpg" class="w-100" alt="Img">
                </div>
            </div>
            <div class="col-md-7 mt-3">
                <div class="product-view">
                    <h4 class="product-name">
                        @Html.DisplayFor(m => m.Name)
                        <label class="label-stock bg-success">In Stock</label>
                    </h4>
                    <hr>
                    <p class="product-path">
                        Home / Category / Product / HP Laptop
                    </p>
                    <div>
                        <span class="selling-price">Price : @Html.DisplayFor(m => m.Price) LE</span>
                    </div>
                    <div>
                        <span id="quantity">Quantity in Stock : @Html.DisplayFor(m => m.QuantityInStock)</span>
                    </div>
                    <div class="mt-2">
                        <div class="input-group">
                            <span class="btn btn1 minus-btn">
                                <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-dash-square" viewBox="0 0 16 16">
                                    <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
                                    <path d="M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8" />
                                </svg>
                            </span>
                            <input id="quantityInput" type="text" value="1" class="input-quantity" />
                            
                            <span class="btn btn1 plus-btn">
                                <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-plus-square-fill" viewBox="0 0 16 16">
                                    <path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm6.5 4.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3a.5.5 0 0 1 1 0" />
                                </svg>
                            </span>
                            <span id="quantity-error" class="text-danger"></span>

                        </div>
                    </div>
                    <div class="mt-2">
                        <a href="" class="btn btn1">
                            <svg xmlns="http://www.w3.org/2000/svg" width="30" height="35" fill="currentColor" class="bi bi-cart" viewBox="0 0 16 16">
                                <path d="M0 1.5A.5.5 0 0 1 .5 1H2a.5.5 0 0 1 .485.379L2.89 3H14.5a.5.5 0 0 1 .491.592l-1.5 8A.5.5 0 0 1 13 12H4a.5.5 0 0 1-.491-.408L2.01 3.607 1.61 2H.5a.5.5 0 0 1-.5-.5M3.102 4l1.313 7h8.17l1.313-7zM5 12a2 2 0 1 0 0 4 2 2 0 0 0 0-4m7 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4m-7 1a1 1 0 1 1 0 2 1 1 0 0 1 0-2m7 0a1 1 0 1 1 0 2 1 1 0 0 1 0-2" />
                            </svg>
                            <b> Add To Cart</b>
                        </a>
                     
                        <a href="" class="btn btn1">
                            <svg xmlns="http://www.w3.org/2000/svg" width="30" height="35" fill="currentColor" class="bi bi-heart" viewBox="0 0 16 16">
                                <path d="m8 2.748-.717-.737C5.6.281 2.514.878 1.4 3.053c-.523 1.023-.641 2.5.314 4.385.92 1.815 2.834 3.989 6.286 6.357 3.452-2.368 5.365-4.542 6.286-6.357.955-1.886.838-3.362.314-4.385C13.486.878 10.4.28 8.717 2.01zM8 15C-7.333 4.868 3.279-3.04 7.824 1.143q.09.083.176.171a3 3 0 0 1 .176-.17C12.72-3.042 23.333 4.867 8 15" />
                            </svg>
                            <b> Add To Favorites </b>
                        </a>
                    </div>
                    <div class="mt-3">
                        <h5 class="mb-0">Small Description</h5>
                        <p>
                            Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a ty
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 mt-3">
                <div class="card">
                    <div class="card-header bg-white">
                        <h4>Description</h4>
                    </div>
                    <div class="card-body">
                        <p>
                            Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="input-group">
    <a class="btn btn-outline-success" asp-action="Edit" asp-route-id="@Model?.ProductId">Edit</a><br />
    <a class="btn btn-outline-success" asp-action="Delete" asp-route-id="@Model?.ProductId">Delete</a> <br />
    <a class="btn btn-outline-success" asp-action="Index">Back to List</a>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js"></script>

<style>
    .product-view .product-name {
        font-size: 24px;
        color: #2874f0;
    }

        .product-view .product-name .label-stock {
            font-size: 13px;
            padding: 4px 13px;
            border-radius: 5px;
            color: #fff;
            box-shadow: 0 0.125rem 0.25rem rgb(0 0 0 / 8%);
            float: right;
        }

    .product-view .product-path {
        font-size: 13px;
        font-weight: 500;
        color: #252525;
        margin-bottom: 16px;
    }

    .product-view .selling-price {
        font-size: 26px;
        color: #000;
        font-weight: 600;
        margin-right: 8px;
    }

    .product-view .original-price {
        font-size: 18px;
        color: #937979;
        font-weight: 400;
        text-decoration: line-through;
    }

    .product-view .btn1 {
        border: 1px solid;
        margin-right: 3px;
        border-radius: 0px;
        font-size: 14px;
        margin-top: 10px;
    }

        .product-view .btn1:hover {
            background-color: #2874f0;
            color: #fff;
        }

    .product-view .input-quantity {
        border: 1px solid #000;
        margin-right: 3px;
        font-size: 12px;
        margin-top: 10px;
        width: 58px;
        outline: none;
        text-align: center;
    }
</style>
<script>
    const displayedQuantity = parseInt(document.getElementById('quantity').textContent.split(': ')[1]);

    const quantityInput = document.getElementById('quantityInput');
    const plusBtn = document.querySelector('.plus-btn');
    const minusBtn = document.querySelector('.minus-btn');
    const quantityError = document.getElementById('quantity-error');

    plusBtn.addEventListener('click',
        () => {
            let currentQuantity = parseInt(quantityInput.value);

            if (currentQuantity < displayedQuantity) {
                quantityInput.value = currentQuantity + 1;
                quantityError.textContent = ''; // Clear any previous error message
            } else {
                quantityError.textContent = 'Cannot add more than available stock';
            }
           
        });

    // You can add similar logic for minus button if needed
    minusBtn.addEventListener('click', () => {
        let currentQuantity = parseInt(quantityInput.value);
        if (currentQuantity > 1) {
            quantityInput.value = currentQuantity - 1;
        }
    });
</script>